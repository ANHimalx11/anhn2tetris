Tetris part B 
TCSS 305: Programming Practicum, Winter 2016

Name: Anh Nguyen
UWNetID: anhn2
Subversion Revision Number: 38

Assignment Overview: In this assignment, Tetris part b, we are to finalize our finished program. The requirements in this part of the assignment was to implement several functions within the game: the ability to pause the game, the ability to end the current game, the ability to start a new game (and have the first game start when the user activates a new game), difficulty progression, a scoring system and the ability to see the scoring algorithm along with a display of the user's score, and an extra functionality.


Technical Impression: The requirements for part b was fairly simple because I had already implemented several of the requirements in part a. The first road block I ran into was having the new game button and end game button enabled and disabled, vice versa. I made a work around solution by playing with some boolean logic. But in retrospect, it would have been much easier for me to just add a property change listener instead. I ran into an instant road block when I attempted to create a display for calculating the score. This was due to the fact that I wasn't sure what I could use as a counter to calculate the user's score. At first I thought that I could use the array of block arrays, but that led to having the score update every update, which isn't what we want. Then I received a useful hint from Mr. Bryan to take a closer look at what kind of data was actually being pushed when the observable pushed out information. At last, I used the list of integers to calculate the scoring by checking the length of the list of integers. The next road block I ran into was having the score update with every new piece that gets frozen. Everything would work fine the first game but when starting a new game, it would add 8 points to the score due to the first piece that came in and the next piece after that. In the end I used the tetris piece data that was being pushed to calculate that extra 4 points and wrote a clear method to reset the score when a new game would start. The rest of the project took some time to complete, but it was fairly straight forward once I understood what my code was doing step by step. I tried to implement an extra feature with background music, but I kept running into null pointer exceptions. I'm not sure if it was due to the type of file I was using or if I had written my audio player incorrectly. 


Changes to the starter code:
None.

Extra Credit:
Mandatory feature: The ability to change the board color and block color.


Unresolved problems in my submission:
None for part B.


Questions:
None.

